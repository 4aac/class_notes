c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
setwd("C:/Users/asher/Desktop/class_notes/fundamentos_aprendizaje_automatico")
dat = read.table("aspirantes.txt", header=TRUE)
head(dat)
head(dat)
summary(dat)
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de covarianza
s = cov(dat)
s
# 2. Calculamos los autovalores:
s_autovalores = eigen(s)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s_pca = lapply(s_autovalores, sqrt)
s_pca
# 4. Comparamos con la medida real:
test.pca[1]
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de covarianza
s = cov(dat)
s
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de covarianza
s = cov(dat)
s
# 2. Calculamos los autovalores:
s_autovalores = eigen(s)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s_pca = lapply(s_autovalores, sqrt)
s_pca
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de cuasivarianza
n = dim(dat)[1]  # o nrow(dat)
s = cov(dat)*(n-1)/n
s
# 2. Calculamos los autovalores:
s_autovalores = eigen(s)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s_pca = lapply(s_autovalores, sqrt)
s_pca
# 4. Comparamos con la medida real:
test.pca[1]
# 4. Comparamos con la medida real:
test.pca[1]
dat = read.table("aspirantes.txt", header=TRUE)
head(dat)
summary(dat)
# Analizamos las componentes principales
test.pca = princomp(dat)
test.pca
# Si hacemos un summary del objeto, obtenemos además la proporción de varianza explicada y sus valores acumulados.
summary(test.pca)
# Además de esta información, el objeto test.pca almacena otra información relevante.
names(test.pca)
# Como hemos visto, podemos obtener las desviaciones típicas de las componentes. De este modo podemos obtener las varianzas de las componentes, que son los autovalores.
test.pca$sdev  # Desviaciones estandar de cada uno de los componentes que tenmos arriba
test.pca$sdev^2
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de cuasivarianza
n = dim(dat)[1]  # o nrow(dat)
s = cov(dat)*(n-1)/n
s
# 2. Calculamos los autovalores:
s_autovalores = eigen(s)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s_pca = lapply(s_autovalores, sqrt)
s_pca
# 4. Comparamos con la medida real:
test.pca[1]
# También se puede calcular manualmente
dat_matrix = as.matrix(dat)
dat_matrix_media = matrix(rep(colMeans(dat_matrix), each = n), nrow = n, byrow = TRUE)
# 1. Calcular la matriz de covarianza manualmente
s2 = ( (t(dat_matrix  - dat_matrix_media)) %*% (dat_matrix - dat_matrix_media) ) / (n - 1)
s2
# 2. Calcular los autovalores manualmente
s2_autovalores = eigen(s2)$values
s2_autovalores
# 3. Raíz cuadrada de los autovalores manuales
s2_pca = sqrt(s2_autovalores)
s2_pca
screeplot(test.pca)  # Representación de los autovalores
screeplot(test.pca, type = "lines") # El mismo gráfico con líneas
scale(dat)
datos_centrados= scale(dat)
datos_centrados= scale(test.pca)
s = 1/n*datos_centrados*T(datos_centrados)
s = 1/n*t(datos_centrados)*datos_centrados
s = 1/n*datos_centrados*t(datos_centrados)
?scale
s = 1/n*t(datos_centrados)*datos_centrados
s = 1/n*t(datos_centrados)%*%datos_centrados
s
datos_centrados= scale(dat)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s_autovalores, sqrt)
s2_pca
datos_centrados= scale(dat)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s_autovalores, sqrt)
s2_pca
datos_centrados= scale(dat)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
s2 = 1/(n-1)*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
datos_centrados= scale(dat, center=FALSE)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
# También se puede calcular manualmente
dat_matrix = as.matrix(dat)
datos_centrados= scale(dat, center=FALSE)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
datos_centrados= scale(dat, center=FALSE)
datos_centrados= scale(dat, center=FALSE)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
datos_centrados= scale(dat, scale=FALSE)
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
# También se puede calcular manualmente
dat_matrix = as.matrix(dat)
summaty(test.pca)
summary(test.pca)
names(test.pca)
test.pca$sdev
test.pca$sdev^2
datos_centrados= scale(dat, scale=FALSE)  # Quitar el scale para que no se estandaricen los datos
?scale
s2 = 1/n*t(datos_centrados)%*%datos_centrados
s2
s2_autovalores = eigen(s2)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s2_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s2_pca = lapply(s2_autovalores, sqrt)
s2_pca
summary(test.pca)
lambda = s2_pca$[1]
lambda = s2_pca[1]
lamda
lambda
lambda = as.list(s2_pca)[1]
lambda
lambda = as.list(s2_pca)[[1]]
lambda
lambda = s2_autovalores[1]
lambda
lambda = s2_autovalores$1
lambda
lambda = s2_autovalores[0]
lambda
sum(s2_autovalores)
sum(as.list(s2_autovalores))
sum(s2_autovalores)
typeof(lambda)
sum(s2_autovalores)
cumsum(s2_autovalores)
auto <- eigen(S)
auto <- eigen(s2)
lambda <- auto$values
lambda
sol = lambda[1] / sum(lambda)
sol
typeof(lambda)
# Si hacemos un summary del objeto, obtenemos además la proporción de varianza explicada y sus valores acumulados.
summary(test.pca)
# Para la cumulativa sumamos varios componentes
sol2 = (lambda[1] lambda[2]) / sum(lambda)
# Para la cumulativa sumamos varios componentes
sol2 = (lambda[1] + lambda[2]) / sum(lambda)
sol2
screeplot(test.pca)  # Representación de los autovalores
screeplot(test.pca, type = "lines") # El mismo gráfico con líneas
screeplot(test.pca)  # Representación de los autovalores
screeplot(test.pca, type = "lines") # El mismo gráfico con líneas
# autovectores asociados (columnas de test.pcs$loadings)
test.pca$loadings
# Representamos los coeficientes de las componentes principales
barplot(loadings(test.pca), beside = TRUE)
biplot(test.pca)
plot(test.pca$scores[,1], test.pca$scores[,2])
biplot(test.pca)
test.pca$scores[,1][13]
test.pca$scores[,1]
test.pca$scores
test.pca[13,]
test.pca[13]
test.pca
test.pca[18]
test.pca[,18]
datos = read.table("decatlon.txt", header=TRUE)
head(datos)
summary(datos)
pc2 = princomp(datos, cor = TRUE)
pc2
n = dim(datos)[1]  # o nrow(dat)
s = cov(datos)*(n-1)/n
# 2. Calculamos los autovalores:
s_autovalores = eigen(s)[1]  # Si no usasemos el 1, dos daría autavalores y autovectores
s_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s_pca = lapply(s_autovalores, sqrt)
s_pca
summary(datos)
biplot(pc2)
biplot(pc3)
pc3 = princomp(datos)
biplot(pc3)
biplot(pc2)
SUMMARY(pc2)
summary(pc2)
summary(pc3)
install.packages("FactoMineR")
library(factoMineR)
install.packages(factoextra)
install.packages("factoextra")
library(factoextra)
library(ggplot2)
library(factoextra)
screeplot(pc2)
fviz_screeplot(pca2, addLabels=TRUE, ylim=(0,100))
fviz_screeplot(pca2, addLabels=TRUE, ylim=c(0,100))
fviz_screeplot(pc2, addLabels=TRUE, ylim=c(0,100))
install.packages("faraway")
# PASO 2)
data(package = faraway.phbirths)
# PASO 2)
data(package = faraway::phbirths)
# PASO 2)
data(package = phbirths)
# PASO 2)
data(package = "phbirths")
# PASO 2)
data("phbirths")
# PASO 1) Abrir librería
library(faraway)
# PASO 2)
data("phbirths")
summary(datos)
names(datos)
head(datos)
?phbirts
??phbirts
# PASO 1) Abrir librería
library(faraway)
# PASO 2) Seleccionar datos
datos = data("phbirths")
# PASO 3) Analizar datos
summary(datos)
names(datos)
head(datos)
# PASO 3) Analizar datos
summary(datos)
names(datos)
?faraway::phbirts
??faraway::phbirts
# PASO 2) Seleccionar datos
data("phbirths")
# PASO 3) Analizar datos
summary(phbirths)
# PASO 3) Analizar datos
summary(phbirths)
names(phbirths)
head(phbirths)
len(phbirths)
length(phbirths)
nrows(phbirths)
length(phbirths$black)
phbirths[phbirths$grams==min(phbirths$grams)]
which.min(phbirths)
which.min(phbirths$grams)
# Vemos cual es el bebe más pequeño
phbirths[phbirths$grams == min(phbirths$grams)]
phbirts[317]
phbirths[317]
which.max(phbirths$grams)
phbirths[,317]
# PASO 3) Analizar datos
summary(phbirths)
# Vemos cual es el bebe más pequeño
phbirths[phbirths$grams == 284)]
# Vemos cual es el bebe más pequeño
phbirths[phbirths$grams == 284]
par(mfrow = c(2,2))
names(phbirths)
density(phbirts$grams)
density(phbirths$grams)
plot(density(phbirths$grams))
plot(x=phbirths$grams, yphbirths$gest)
plot(x=phbirths$grams, y= phbirths$gest)
plot(density(phbirths$gest))
z
z = lm(y ~ x)
z = lm(y ~ x); z
summary(z)
y = log(y=log(phbirths$grams))
x = phbirths$gestate
z = lm(y ~ x); z
summary(z)
y = log(y=log(phbirths$grams))
x = phbirths$gestate
z = lm(y ~ x); z
x = phbirths$gestate
z = lm(y ~ x); z
summary(z)
y.estimado = coef(z)[[1]] + coef(z)[[2]] * x
y.estimado
y = log(phbirths$grams)
x = phbirths$gestate
z = lm(y ~ x); z
summary(z)
y.estimado = coef(z)[[1]] + coef(z)[[2]] * x
y.estimado
error = y - y.estimado
error = y - y.estimado; error
summary(error)
summary(z)
z = lm(y ~ x); z
y.estimado
error = y - y.estimado; error
summary(error)
summary(z)
plot(x, y)
abline(z, color="red")
plot(x, y)
abline(z, col="red")
par(mfrow = c(1,1))
plot(x, y)
abline(z, col="red")
xbarra = mean(x)
ybarra = mean(y)
abline(ybarra, col="blue")
abline(z, col="red")
xbarra = mean(x)
ybarra = mean(y)
abline(xbarra, col="blue")
abline(ybarra, col="blue")
abline(z, col="red")
xbarra = mean(x)
ybarra = mean(y)
abline(h = xbarra, col="blue")
abline(v = ybarra, col="blue")
xbarra = mean(x)
ybarra = mean(y)
par(mfrow = c(1,1))
plot(x, y)
abline(z, col="red")
abline(h = xbarra, col="blue")
abline(v = ybarra, col="blue")
y = log(phbirths$grams)
x = phbirths$gestate
z = lm(y ~ x); z
summary(z)
# Calculamos los residuos
y.estimado = coef(z)[[1]] + coef(z)[[2]] * x
y.estimado
error = y - y.estimado; error
summary(error)
xbarra = mean(x)
ybarra = mean(y)
par(mfrow = c(1,1))
plot(x, y)
abline(z, col="red")
abline(h = xbarra, col="blue")
abline(v = ybarra, col="blue")
abline(h = xbarra, col="blue")
abline(v = ybarra, col="blue")
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
abline(z, col="phbirths$smoke")
names(phbirths)
abline(z, col=phbirths$smoke)
(x)
(x)
(x)
(x)
xbarra = mean(x)
ybarra = mean(y)
par(mfrow = c(1,1))
plot(x, y)
abline(z, col=phbirths$smoke)
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
abline(z, col=phbirths$smoke, pch=17)
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
abline(z, col=as.factor(phbirths$smoke), pch=17)
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
xbarra = mean(x)
ybarra = mean(y)
par(mfrow = c(1,1))
plot(x, y)
abline(z, col=as.factor(phbirths$smoke), pch=17)
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
plot(x, y,  col=as.factor(phbirths$smoke), pch=17)
abline(z)
abline(h = ybarra, col="blue")
plot(x, y,  col=as.factor(phbirths$smoke), pch=15)
plot(x, y,  col=as.factor(phbirths$smoke), pch=16)
abline(z)
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
plot(x, y,  col=as.factor(phbirths$black), pch=16)
abline(z)
abline(h = ybarra, col="blue")
abline(v = xbarra, col="blue")
