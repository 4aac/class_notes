# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
png("matriz_flujos.png", width=800, height=600)
image(
t(matriz_flujos[nrow(matriz_flujos):1, ]), # Rotar para que la fila 1 esté arriba
col=gray.colors(3, start = 0, end = 1),    # Escala de grises
xlab="Flujos", ylab="Nodos",
main="Matriz de Flujos de Adyacencia"
)
dev.off()
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Guardar la matriz como una imagen PNG
png("matriz_flujos.png", width=800, height=600)
# Visualizar la matriz con colores para -1, 0, 1
image(
t(matriz_flujos[nrow(matriz_flujos):1, ]),  # Rotar la matriz
col = c("blue", "white", "red"),            # Colores para -1, 0, 1
xlab = "Flujos", ylab = "Nodos",
main = "Matriz de Flujos de Adyacencia"
)
# Visualizar la matriz con colores para -1, 0, 1
image(
t(matriz_flujos[nrow(matriz_flujos):1, ]),  # Rotar la matriz
col = c("blue", "white", "red"),            # Colores para -1, 0, 1
xlab = "Flujos", ylab = "Nodos",
main = "Matriz de Flujos de Adyacencia"
)
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
png("matriz_flujos_plot.png", width=800, height=600)
# Preparar el área de plot
plot(1:32, 1:15, type = "n", xlab = "Flujos", ylab = "Nodos",
xlim = c(1, 32), ylim = c(1, 15), main = "Matriz de Flujos de Adyacencia")
# Crear la matriz de flujos (de 15x32) como antes
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
for (i in 1:length(arcos_info)) {
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1
matriz_flujos[destino, i] <- -1
}
}
# Guardar como archivo PNG
png("matriz_flujos_plot.png", width=800, height=600)
# Preparar el área de plot para la matriz de flujos
plot(1:31, 1:15, type = "n", xlab = "Flujos", ylab = "Nodos",
xlim = c(1, 31), ylim = c(1, 15), main = "Matriz de Flujos de Adyacencia")
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Instalar y cargar las librerías necesarias si no están instaladas
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Convertir la matriz a un formato largo para ggplot
datos_largo <- melt(matriz_flujos)
colnames(datos_largo) <- c("Nodo", "Arco", "Valor")
# Crear la visualización
p <- ggplot(datos_largo, aes(x = Arco, y = Nodo, fill = factor(Valor))) +
geom_tile(color = "white") +
scale_fill_manual(
values = c("-1" = "red", "0" = "white", "1" = "blue"),
name = "Valor",
labels = c("Destino (-1)", "Sin conexión (0)", "Origen (1)")
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5)
) +
labs(
title = "Matriz de Flujos",
x = "Número de Arco",
y = "Número de Nodo"
) +
coord_fixed()
# Guardar la visualización
ggsave("matriz_flujos.png", p, width = 12, height = 8, dpi = 300)
# Mostrar la visualización
print(p)
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
# Crear una matriz vacía de 15x32
matriz_flujos <- matrix(0, nrow=15, ncol=31)
# Lista de arcos en el grafo
arcos_info <- list(
c(1,2), c(1,3),
c(2,5), c(2,4), c(2,3),
c(3,6),
c(4,3), c(4,6), c(4,9), c(4,8),
c(5,4), c(5,7), c(5,8),
c(6,10), c(6,11),
c(7,8), c(7,13),
c(8,12), c(8,9),
c(9,6), c(9,11), c(9,14),
c(10,11), c(10,15),
c(11,14), c(11,15),
c(12,9), c(12,14),
c(13,12), c(13,14),
c(14,15)
)
# Llenar la matriz de flujos
for (i in 1:length(arcos_info)) {
# Extraer el origen y destino del arco
origen <- arcos_info[[i]][1]
destino <- arcos_info[[i]][2]
# Asegurarse de que el origen y destino están dentro del rango de filas
if (origen <= nrow(matriz_flujos) && destino <= nrow(matriz_flujos)) {
matriz_flujos[origen, i] <- 1   # Nodo de origen
matriz_flujos[destino, i] <- -1 # Nodo de destino
} else {
warning(paste("Nodo fuera de rango en arco:", origen, "->", destino))
}
}
# Mostrar la matriz de flujos
matriz_flujos
dat = read.table("aspirantes.txt", header=TRUE)
setwd("C:/Users/asher/Desktop/class_notes/fundamentos_aprendizaje_automatico")
head(dat)
dat = read.table("aspirantes.txt", header=TRUE)
head(dat)
# Analizamos las componentes principales
test.pca = princomp(dat)
test.pca
# Si hacemos un summary del objeto, obtenemos además la proporción de varianza explicada y sus valores acumulados.
summary(test.pca)
# Además de esta información, el objeto test.pca almacena otra información relevante.
names(test.pca)
dat = read.table("aspirantes.txt", header=TRUE)
head(dat)
# Analizamos las componentes principales
test.pca = princomp(dat)
test.pca
s = cov(dat) / (dim(dat)[1]-1)
s
s_autovalores1 = eigen(s)[1]
s_autovalores1
# Matriz de covarianza
s2 = (t(as.matrix(dat)) %*% as.matrix(dat)) / (dim(dat)[1]-1)
s2
s = cov(dat)
s
s_autovalores1 = eigen(s)[1]
s_autovalores1
lapply(s_autovalores1, sqrt)
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de covarianza
s = cov(dat)
s
# 2. Calculamos los autovalores:
s_autovalores1 = eigen(s)[1]
s_autovalores1
# 3. Hacemos la raiz cuadrada de los autovalores:
lapply(s_autovalores1, sqrt)
# 4. Comparamos con la medida real:
test.pca
# 4. Comparamos con la medida real:
test.pca[1]
# Para calcular las componentes principales, realizamos los siguientes pasos:
# 1. Calculamos la matriz de covarianza
s = cov(dat)
s
# 2. Calculamos los autovalores:
s_autovalores = eigen(s)[1]
s_autovalores
# 3. Hacemos la raiz cuadrada de los autovalores:
s_pca = lapply(s_autovalores1, sqrt)
s_pca
# 4. Comparamos con la medida real:
test.pca[1]
dat = read.table("aspirantes.txt", header=TRUE)
head(dat)
# Analizamos las componentes principales
test.pca = princomp(dat)
test.pca
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix = as.matrix(dat)
# 1. Calcular la matriz de covarianza manualmente
s2 = (t(dat_matrix) %*% dat_matrix) / (n - 1)
s2
# 2. Calcular los autovalores manualmente
s2_autovalores = eigen(s2)$values
s2_autovalores
# 3. Raíz cuadrada de los autovalores manuales
s2_pca = sqrt(s2_autovalores)
s2_pca
dat_matrix = as.matrix(dat)
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix_media = scale(dat_matrix, center = TRUE, scale = FALSE)
# 1. Calcular la matriz de covarianza manualmente
s2 = (t(dat_centered) %*% dat_centered) / (n - 1)
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix = as.matrix(dat)
dat_matrix_media = scale(dat_matrix, center = TRUE, scale = FALSE)
# 1. Calcular la matriz de covarianza manualmente
s2 = (t(dat_matrix_media) %*% dat_matrix_media) / (n - 1)
s2
# 2. Calcular los autovalores manualmente
s2_autovalores = eigen(s2)$values
s2_autovalores
# 3. Raíz cuadrada de los autovalores manuales
s2_pca = sqrt(s2_autovalores)
s2_pca
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix = as.matrix(dat)
dat_matrix_media = matrix(rep(medias, each = n), nrow = n, byrow = TRUE)
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix = as.matrix(dat)
dat_matrix_media = matrix(rep(colMeans(dat_matrix), each = n), nrow = n, byrow = TRUE)
# 1. Calcular la matriz de covarianza manualmente
s2 = ( ((t(dat_matrix) - dat_matrix_media) %*% (dat_matrix) - dat_matrix_media) ) / (n - 1)
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix = as.matrix(dat)
dat_matrix_media = matrix(rep(colMeans(dat_matrix), each = n), nrow = n, byrow = TRUE)
# 1. Calcular la matriz de covarianza manualmente
s2 = ( ((t(dat_matrix  - dat_matrix_media)) %*% (dat_matrix) - dat_matrix_media) ) / (n - 1)
s2
# 2. Calcular los autovalores manualmente
s2_autovalores = eigen(s2)$values
s2_autovalores
# 3. Raíz cuadrada de los autovalores manuales
s2_pca = sqrt(s2_autovalores)
s2_pca
# 1. Calcular la matriz de covarianza manualmente
s2 = ( (t(dat_matrix  - dat_matrix_media)) %*% (dat_matrix - dat_matrix_media) ) / (n - 1)
s2
# 2. Calcular los autovalores manualmente
s2_autovalores = eigen(s2)$values
s2_autovalores
# 3. Raíz cuadrada de los autovalores manuales
s2_pca = sqrt(s2_autovalores)
s2_pca
# También se puede calcular manualmente
n = dim(dat)[1]
dat_matrix = as.matrix(dat)
dat_matrix_media = matrix(rep(colMeans(dat_matrix), each = n), nrow = n, byrow = TRUE)
# 1. Calcular la matriz de covarianza manualmente
s2 = ( (t(dat_matrix  - dat_matrix_media)) %*% (dat_matrix - dat_matrix_media) ) / (n - 1)
s2
# 2. Calcular los autovalores manualmente
s2_autovalores = eigen(s2)$values
s2_autovalores
# 3. Raíz cuadrada de los autovalores manuales
s2_pca = sqrt(s2_autovalores)
s2_pca
